use solana_program::{blake3::HASH_BYTES, hash::Hash};

//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |          capacity: u32         |        size_hash_1: u32        |        size_hash_2: u32        |             padding            |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                               padding                                                             |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                         recent_hash_1: Hash                                                       +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                         recent_hash_2: Hash                                                       +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                           hash_1_1: Hash                                                          +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                                ...                                                                +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                     hash_1_<size_hash_1>: Hash                                                    +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                           hash_2_1: Hash                                                          +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                                ...                                                                +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                     hash_2_<size_hash_2>: Hash                                                    +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                         empty_hash_1: Hash                                                        +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                                                ...                                                                +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+
//  |                                                                                                                                   |
//  +                                      empty_hash_<capacity - (size_hash_1 size_hash_2)>: Hash                                      +
//  |                                                                                                                                   |
//  +--------------------------------+--------------------------------+--------------------------------+--------------------------------+

struct HashStorage {
    capacity: u32,
    size_hash_1: u32,
    size_hash_2: u32,
    recent_hash_1: Hash,
    recent_hash_2: Hash,
    hashes: Vec<Hash>,
}

impl TryFrom<&mut [u8]> for HashStorage {
    type Error = ();

    fn try_from(data: &mut [u8]) -> Result<Self, Self::Error> {
        if data.len() % HASH_BYTES != 0 {
            Err(())
        } else {
            Ok(HashStorage {
                capacity: u32::from_be_bytes(data[0..4].try_into().expect("correct size")),
                size_hash_1: u32::from_be_bytes(data[4..8].try_into().expect("correct size")),
                size_hash_2: u32::from_be_bytes(data[8..12].try_into().expect("correct size")),
                recent_hash_1: Hash::new_from_array(data[32..64].try_into().expect("correct size")),
                recent_hash_2: Hash::new_from_array(data[64..96].try_into().expect("correct size")),
                hashes: data[96..]
                    .chunks_exact(32)
                    .map(|chunk| Hash::new_from_array(chunk.try_into().expect("correct_size")))
                    .collect(),
            })
        }
    }
}

impl Into<Vec<u8>> for HashStorage {
    fn into(self) -> Vec<u8> {
        let mut v = Vec::with_capacity(self.capacity as usize * 32 + 96);
        v.extend(self.capacity.to_be_bytes());
        v.extend(self.size_hash_1.to_be_bytes());
        v.extend(self.size_hash_2.to_be_bytes());
        v.extend([0, 0, 0, 0]);
        v.extend([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        v.extend(self.recent_hash_1.to_bytes());
        v.extend(self.recent_hash_2.to_bytes());
        v.extend(self.hashes.into_iter().flat_map(|hash| hash.to_bytes()));
        v
    }
}

impl HashStorage {}
